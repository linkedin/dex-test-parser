apply plugin: 'kotlin'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.jetbrains.dokka'

mainClassName = 'com.linkedin.dex.parser.DexParser'

version = VERSION_NAME

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.kotlin.srcDirs
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
    inputs.dir 'src/main/kotlin'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        lib(MavenPublication) {
            artifact sourcesJar
            artifact javadocJar

            from components.java
            artifact shadowJar {
                classifier "all"
            }

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    description = 'A utility library for finding all test methods in an Android instrumentation apk'
                    url 'https://github.com/linkedin/dex-test-parser'
                    scm {
                        url 'https://github.com/linkedin/dex-test-parser'
                        connection 'scm:git:git://github.com/linkedin/dex-test-parser.git'
                        developerConnection 'https://github.com/linkedin/dex-test-parser.git'
                    }
                    licenses {
                        license {
                            name 'BSD 2-Clause License'
                            url 'https://opensource.org/licenses/BSD-2-Clause'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'com.linkedin'
                            name 'LinkedIn Corp'
                            email ''
                        }
                    }
                }
            }
        }
    }
}

repositories {
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    testCompile 'junit:junit:4.12'
}

artifactoryPublish.dependsOn shadowJar
build.dependsOn shadowJar

task testParsing(dependsOn: ':test-app:assembleDebugAndroidTest', type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = 'com.linkedin.dex.parser.DexParser'
    args "${rootProject.project('test-app').buildDir}/outputs/apk/test-app-debug-androidTest.apk", "$buildDir"

    doLast {
        def validTests = file('ValidTestList.txt').readLines()
        def parsedTests = file("$buildDir/AllTests.txt").readLines()

        if (validTests != parsedTests) {
            throw new GradleException("Parsed tests do not match expected tests")
        }
    }
}
check.dependsOn testParsing

// Configure the jvm tests so that apk will be present and in a consistent location
// When you run from the IDE, the working directory is different than when running through gradle
// To make sure we can run tests from either the IDE or gradle directly, we set it to be the same as IDE settings
// We also need to make sure the test apk is generated as part of the compile task, so the tests have their
// dependencies fulfilled
testClasses.dependsOn ':test-app:assembleDebugAndroidTest'
test {
    workingDir project.getRootProject().getProjectDir()
}
